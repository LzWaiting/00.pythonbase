python 函数的参数传递：
	
	传递方式（两类四种）：
		位置传递（先）
			序列传递
		关键字传参（后）
			字典关键字传参
	
	1.1 位置传参：
		解释：
			实际参数（实参）的对应关系与形式参数（形参）的对应关系是按位置来依次对应的
		示例：
			def myfun(a,b,c):
				pass

			myfun(1,2,3)
		说明：
			实参和形参通过位置进行传递的匹配，实参个数必须与形参个数相同
		
	1.2 序列传参：
		解释：
			序列传参是指在函数调用过程中，用 * 将序列拆解后按位置传参的方式进行传参
		示例：
			def myfun(a,b,c):
				pass
			
			s = [1,2,3]
			myfun(*s)		# 此时 * 表示把s拆开,拆解序列调用，(*s)等同于（s[0],s[1],s[2]）
			s2 = 'ABC'
			myfun(*s2)

	2.1 关键字传参：
		解释：
			关键字传参是指传参时，按着形参的名称给形参赋值，实参和形参按名称进行匹配
		示例：
			def myfun(a,b,c):
				pass

			myfun(b = 22,c = 33,a = 11)			# 等同于myfun(11,22,33)
			myfun(c = 3,b = 2,a = 1)			# 等同于myfun(1,2,3)
		说明：
			实参与形参可以不按位置匹配

	2.2 字典关键字传参：
		解释：
			字典关键字传参是指实参为字典，将字典用 ** 拆解后进行关键字传参
		示例：
			def myfun(a,b,c):
				pass

			d = {'c':33,'b':22,'a':11}
			myfun(**d)		# 拆解字典后再传参，无序，不影响
		说明：
			字典键名和形参名必须一致
			字典键名必须为字符串
			字典键名要在形参中存在，数量一致

	函数的综合传参：
		解释：
			函数传参方式，在能确定形参能唯一匹配到相应实参的情况下可以任意组合
		示例：
			def myfun(a,b,c):
				pass

			myfun(100,*[200,300])			# True
			myfun(*'AB',300)				# True
			myfun(100,c = 300,b = 200)		# True
			myfun(1,**{'c':3,'b':2})		# True
			myfun(**{'c':3,'b':2},a = 1) 	# True
			myfun(b = 2,c = 3,1) 			# False 1不能确定传参给谁
		说明：
			传参时，先位置传参，后关键字传参
		
		练习：
			def mysum3(a,b,c):
				return a + b + c

			def mypow3(x):
				return x ** 3

			L = [mypow3(1),mypow3(2),mypow3(3)]
			print(mysum3(*L))
 			print(mypow3(mysum3(1,2,3)))

	注:函数传参时,
		1. 参数为不可变类型数据时,函数内部改变参数,外部不可变数据不变
		示例:
			def fun(a):
				a = 'nihao'

			s = 'hello'
			fun(s)
			print(s)	# 'hello'
		2. 参数为可变类型时,函数内部改变参数,外部可变数据类型发生改变
		示例:
			def fun(a):
				a.append(5)

			L = [1,2,3,4]
			fun(L)
			print(L)	# [1,2,3,4,5]