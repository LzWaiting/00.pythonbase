列表 list
	列表是由一系列特定元素组成的,元素和元素之间没有任何关联关系,但他们之间有先后顺序关系
	列表是一种容器
	列表是序列的一种
	列表是可以被改变的序列

	python 中的序列类型介绍(sequence)
		字符串 str 			# 不可变对象
		列表 list 			# 可变对象
		元组 tuple 			# 不可变对象
		字节串 bytes			# 不可变对象
		字节数组 bytearray	# 可变对象

	类型可以使用type()

	创建空列表的字面值:
		L = []	# L绑定空列表

	创建非空列表:
		L = [1,2,3,4]
		L = ['北京','上海','成都']
		L = [1,'two','三']
		L = [1,2,[3.1,3.2,3.3],4]

	列表的构造(创建)函数list
		list()	生成一个空的列表 等同于[]
		list(iterable)	用可迭代对象创建一个列表
		示例:
			L = list()	L 为空列表
			L = list("ABCD")	# L --> ['A','B','C','D']
			L = list(range(1,10,2))

列表的运算:
	
	算术运算:
		+ += * *=
	+ 用于拼接列表
		x = [1,2,3]
		y = [4,5,6]
		z = x + y = [1,2,3,4,5,6]
	+= 用于原列表与左侧可迭代对象进行拼接,生成新的列表
		x = [1,2,3]
		x += "ABC"		# 必须是可迭代对象
		x = [1,2,3,A,B,C]
	* 用于生成重复的列表
		x = [1,2,3] * 2		# x = [1,2,3,1,2,3]
	*= 用于生成重复的列表,同时用变量绑定新列表
		x = [1,2]
		x *= 3		# x = [1,2,1,2,1,2]

	列表的比较运算:
		运算符:
			< <= > >= == !=
		示例:
			x = [1,2,3]
			y = [2,3,4]
			x != y							# True
			x < y							# True
			x > [1,2]						# True
			[1,3,2] > [1,2,3]				# True
			['AB','CD'] > ['AC','BD']		# False
			[1,'two'] > ['two',1]			# TypeError
	
	列表的 in / not in:
		作用:
			1.判断一个数据元素是否存在于容器(列表)内,如果存在返回True,否则返回False
			2.not in 的返回值与 in 运算符相反
		示例:
			x = [1,'Two',3.14,'四']
			1 in x			# True
			2 in x			# False
			3 not in x		# True
			'四' not in x	# False
	
	列表的索引 index:
		
		列表索引的取值
		语法:
			列表[整数表达式]
		用法:
			列表的索引取值与字符串的索引取值规则完全相同
			列表的索引分为正向索引和反向索引
		
		列表的索引赋值
			列表是可变的序列，可以通过索引赋值改变列表中的元素
		语法：
			列表［索引］＝　表达式
		示例：
			ｘ = [1,2,3,4]
			x[2] = 3.14		# 改变了第三个元素的值

	列表的切片 slice:
		
		列表切片的取值
		语法：
			列表［:］
			列表的［::］
		用法：
			列表的切片取值返回一个列表，规则等同于字符串的切片规则
		示例：
			ｘ = list(range(9))
			y = x [1:9:2]		# y = [1,3,5,7]
		
		列表的切片赋值语法：
			列表［切片］＝　［可迭代对象］
		说明：
			切片赋值的赋值运算符的右侧必须是一个可迭代对象
			可实现-->批量替换
		示例：
			L = [2,3,4]
			L[0:1] = [1.1,2.2]
			print(L)	# [1.1,2.2,3,4]
			
			L = [2,3,4]
			L[:] = [7,8]
			print(L)	# [7,8]

			L = [2,3,4]
			L[1:1] = [2.3,2.4]	# L[0:0]前面增加,L[3:3]后面增加
			print(L)	# [2,2.3,2.4,3,4]

			L = list(range(1,9))
			L[1::2] = [2.0,4.0,6.0,8.0]
			print(L)	# [1,2.0,3,4.0,5,6.0,7,8.0]
		
		切片注意事项:
			对于步长不等于1的切片赋值,赋值运算符的右侧的可迭代对象提供元素的个数一定要等于切片切出的段数
		示例:
			L = list(range(5))
			L[::2] = 'ABC'	# True
			L[::2] = 'AB'	# False 
		
		切片作用:
			可以为列表进行添加,删除,修改数据

	del 语句用于删除列表元素
		语法:
			del 列表[索引]
			del 列表[切片]
		示例:
			L = list(range(7))	# [0,1,2,3,4,5,6]
			del L[0]	# [1,2,3,4,5,6]
			del L[-1]	# [1,2,3,4,5]
			del L[::2]	# [2,4]

列表方法:
	L.index(v[,begin[,end]])	# 返回对应元素的索引下标,begin为开始索引,end为结束索引,当不存在时触发ValueError错误
	L.insert(index,obj)			# 将某个元素插放到列表中指定的位置
	L.count(x)					# 返回列表中元素的个数
	L.remove(x)					# 从列表中删除第一次出现在列表中的值
	L.copy()					# 复制此列表(只复制一层,不会复制深层对象)
	L.append(x)					# 向列表中追加单个元素
	L.extend(list)				# 向列表追加另一个列表
	L.clear()					# 清空列表,等同于L[:]=[]
	L.sort(reverse=False)		# 将列表中的元素进行排序,默认顺序按值的小到大的顺序排列
	L.reverse()					# 列表的反转,用来改变原列表的先后顺序
	L.pop([index])				# 删除索引对应的元素,如果不加索引,默认删除最后元素,同时返回删除元素的引用关系

列表推导式 list comprehension (表达式,返回列表)
	列表推导式是用可迭代对象依次生成带有多个元素的列表的表达式
	作用:
		用简易方法生成列表
	语法:
		[表达式 for 变量 in 可迭代对象]
		或[表达式 for 变量 in 可迭代对象 if 真值表达式]
	示例:
		# 以下生成一个数值为1~9的平方的列表
		L = [x*x for x in range(1,10)]

列表推导式的嵌套:
	语法:
		[表达式1
		for 变量1 in 可迭代对象1 if 真值表达式1
		for 变量2 in 可迭代对象2 if 真值表达式2
		...]
	示例:
		L1 = [2,3,5]
		L2 = [7,11,13]
		将L1中的全部元素与L2中的全部元素依次相乘后放到列表L3中
		L3 = [x*y for x in L1 for y in L2]
		print(L3) 		# L3 = [14,22,26,21,33,39,35,55,65]
