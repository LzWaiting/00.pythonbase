集合 set:
	特点:	
		集合是可变的容器
		集合内的数据对象是唯一的(不能重复多次的)
		集合是无序的存储结构,集合中的数据没有先后关系
		集合内的元素必须是不可变对象
		集合是可迭代的
		集合是相当于只有键没有值的字典(键则是集合的数据)
	创建空的集合:
		s = set()			# set() 创建一个空的集合
	创建非空集合:
		s = {1,2,3}			# 集合中的三个整数1,2,3
	集合的构造函数 set:
		set()	创建空集合
		set(iterable)	用可迭代对象创建一个新的集合对象
		示例:
			s = set("ABC")
			s = set('ABCCBA')
			s = set({1:'one',2:'two',3:'three'})
			s = set([1,3.14,False])
			s = set((2,3,4,5))
			s = set([1,2,[3,4],5])		# 错误的,因[3,4]为可变对象
	集合的运算:
		交集(&)
		并集(|)
		补集(-)		# (^) 生成两个集合的对称补集
		子集(<)		# 判断一个集合是否是另一个集合的子集
		超集(>)		# 判断一个集合是否是另一个集合的超集
		示例:
			s1 = {1,2,3}
			s2 = {2,3,4}
			s3 = s1 & s2		# 交集{2,3}
			s4 = s1 | s2		# 并集{1,2,3,4}
			s5 = s1 - s2		# s1 对 s2的补集{1}
			s6 = s1 ^ s2 		# 生成对称补集{1,4}	等同于(s1 - s2) | (s2 - s1)
			s0 = {1,2,3,5}
			s1 < s0				# True 判断子集
			s2 < s0				# False
			s0 > s3				# True 判断超级
	== != 集合相同/不同 	<= >= 等运算
		s1 = {1,2,3}
		s2 = {2,1,3}
		s1 == s2			# True
		s1 != s2 			# False 集合的数据没有先后关系
	in / not in 运算符:
		等同于字典,in运算符用于集合中,当某个值存在于集合中,则为真,否则为假.not in 与 in 返回值相反
		示例:
			s = {1,'Two',3.14}
			1 in s 				# True
			2 in s 				# False
			3.14 not in s 		# False 	
			4 not in s 			# True
	可用在集合的函数:
		len(x) max(x) min(x) sum(x) any(x) all(x)
	集合是可迭代对象:
		s = {1,2,3}
		for x in s:
			print(x) 		# 可以,但无法确保顺序
	集合是可变对象,可以添加/删除,不可以修改:
		使用集合的方法实现:
		方法:
			S.add(e)							# 在集合中添加一个新的元素e,如果元素已经存在,则不添加
			S.remove(e)							# 从集合中删除一个元素,如果元素不存在于集合中,则会产生一个KeyError错误
			S.discard(e)						# 从集合S中移除一个元素e,在元素e不存在时什么都不做
			S.clear()							# 清空集合内的所有元素
			S.copy()							# 将集合进行一次浅拷贝
			S.pop()								# 从集合S中删除一个随机元素,如果此集合为空,则引发KeyError异常
			S.update(s2)						# 用S与s2得到的全集,更新变量S
			
			S.difference(s2)					# 用S-s2运算,返回存在于S中,但不存在s2中的所有元素的集合
			S.difference_update(s2) 			# 等同于 S = S - s2
			S.intersection(s2)					# 等同于 S & s2
			S.intersection_update(s2) 			# 等同于 S = S & s2
			S.isdisjoint(s2)					# 如果S与s2交集为空返回True,非空则返回False
			S.issubset(s2)						# 如果S与s2交集为非空返回True,否则返回False
			S.issuperset(...)					# 如果S为s2的子集返回True,否则返回False
			S.symmetric_difference(s2)			# 返回对称补集,等同于S ^ s2
			S.symmetric_difference_update(s2)	# 用S与s2的对称补集更新S
			S.union(s2)							# 生成S与s2的全集
	集合推导式:
		作用:
			用可迭代对象来创建(生成)集合的表达式
		语法:
			{表达式 for 变量 in 可迭代对象 [if 真值表达式]}
		示例:
			L = [2,3,5,7,3,5,7,11]
			s = {x**2 for x in L}
	
问题?
	能否使用集合作为字典的键?

	固定集合 frozenset:
		定义:
			固定集合是不可变的,无序的,含有唯一元素的集合
		作用:
			固定集合可以作为字典的键,也可以作为集合的值
		创建空的固定集合:
			fs = frozenset()
		创建非空的固定集合:
			fs = frozenset([2,3,5,7])
		构造函数:
			frozenset()
			frozenset(可迭代对象)
	固定集合的运算:
		& 交集
		| 并集
		- 补集
		^ 对称补集
		>  >=  <  <=  ==  !=
		in / not in 
		(以上运算规则等同于set中的用法)
	固定集合的方法：
		相当于集合的全部方法 去掉 修改集合的方法
