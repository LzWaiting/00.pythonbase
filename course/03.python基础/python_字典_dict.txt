字典 dict
	定义:
		1.字典是一种可变的容器,可以存储任意类型的数据
		2.字典中的每一个数据都是用'键'(key)进行索引,而不想序列可以用下标来进行索引
		3.字典的数据没有先后顺序关系,字典的存储是无序的
		4.字典中的数据以 键(key)-值(value)对 进行映射存储
		5.字典的键不能重复,且只能用不可变类型作为字典的键
	字典的字面值表示方式:
		用{} 括起来,以冒号(:)分隔键-值对,各键值对 用逗号分隔开
	创建空字典:
		d = {}
	创建非空字典:
		d = {'name':'tarena','age':15}
		d = {'姓名':'小张'}
		d = {1:'壹',2:'贰'}
	字典的构造函数:
		dict()				创建一个空字典,等同于{}
		dict(iterable)		用可迭代对象初始化一个字典
		dict(**kwargs)		关键字传参形式生成一个字典
		示例:
			d = dict()	
				d = dict([('name','tarena'),('age',15)])
			d = dict(name = 'tarena',age = 15) 
	字典的基本操作
	字典的键索引:
		用[]运算符可以获取字典内'键'所对应的'值'
		语法:
			字典[键]
	获取数据元素:
		d = dict(name='tarena',age=15)
		print(d['age'])			# 15
	添加/修改字典元素:
		字典[键] = 表达式
		示例:
			d = {}
			d['name'] = 'tarena'	# 创建一个新的键值对
			d['age'] = 15			# 创建键值对
			d['age'] = 16			# 修改键值对
	del 语句删除字典的元素:
		语法:
			del 字典[键]
		示例:
			d = {'name':'china','pos':'asia'}
			del d['pos']
			print(d)		# {'name':'china'}
			del d['name']
			print(d)		# {}
	字典的 in / not in 运算符
		可以用 in 运算符来判断一个'键'是否存在于字典中.如果存在则返回True,否则返回False
		not in 与 in 返回值相反
		示例:
			d = {'a':1,'b':2}
			'a' in d 			# True
			1 in d 				# false
			100 not in d 		# True
			2 not in d 			# True 
	字典的迭代访问:
		字典是可迭代对象,字典只能对键进行迭代访问
		示例:
			d = {'name':'tarena',(2002,1,1):'生日'}
			for x in d:
				print('键',x,'值',d[x])		# 键 name 值 tarena		键 (2002,1,1) 值 生日
	可以用于字典的内建函数:
		len(x)	返回字典键-值对的个数
		max(x)	返回字典的键的最大值
		min(x)	返回字典的键的最小值
		sum(x)	返回字典所有键的和
		any(x)	真值测试,只对键测试,如果其中一个键为True,结果为True
		all(x)	真值测试,全部键为True时,结果才为True
	字典的方法:
		D.clear()			# 清空字典
		D.pop(key)			# 移除键,同时返回此键所对应的值
		D.copy()			# 返回字典D的副本,只复制一层(浅拷贝)
		D.update(D2)		# 将字典D2合并到D中,如果键相同,则此键的值取D2的值作为新值
		D.get(key,default)	# 返回键key所对应的值,如果没有此键,则返回default(返回输入的对应值)
		D.keys()			# 返回可迭代的dict_keys集合对象
		D.values()			# 返回可迭代的dict_values值对象
		D.items()			# 返回可迭代的dict_items对象
	字典推导式:
		字典推导式是用可迭代对象依次生成字典内元素的表达式
		语法:
			{键表达式:值表达式 for 变量 in 可迭代对象 [if 真值表达式]}
		示例:
			d = {x:x**2 for x in range(10)}	
字典 VS 列表:
	相同点:
		都是可变的容器
	区别:
		1.索引方式不同(列表用整数索引,字典用键索引)
		2.字典的查找速度可能快于列表(重要) 	# 针对大数据时
		3.列表的存储是有序的,字典的存储是无序的
