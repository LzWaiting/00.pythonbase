包 （模块包）package
	定义：
		包是将模块以文件夹的组织形式进行分组管理的方法
	作用：
		将一系列模块进行分类管理，有利于防止命名冲突
		可以在需要时加载一个或部分模块而不是全部模块
	示例：
		mypack/
			__init__.py
			menu.py
			games/
				__init__.py
				contra.py
				supermario.py
				tanks.py
			office/
				__init__.py
				excel.py
				word.py

		__init__.py 文件
			说明：
				常规包内必须存在的文件
				__init__.py 会在包加载时被自动调用

			作用：
				编写此包的内容
				在内部填写文档字符串
				在__init__.py 内可以加载此包所依赖的一些其他模块

	包的导入：
		用三条import 语句可以导入包（同模块的导入规则）

		import 包名 [as 包别名]
		import 包名.模块名 [as 模块新名]
		import 包名.子包名.模块名

		from 包名 import 模块名 [as 模块新名]
		from 包名.子包名 import 模块名 [as 模块新名]
		from 包名.子包名.模块名 import 属性名 [as 属性新名]

		from 包名 import *
		from 包名.模块名 import *

	包的__init__.py 内的__all__ 列表
		作用：
			用来记录此包中有那些子包或模块在用 from 包 import * 语句导入时是否被调导入
		格式：
			__all__ = [被加载.py文件名，...]
		示例：
			mypack/games/__init__.py

	包的相对导入
		定义：
			包的相对导入是指包内模块的相互导入
		语法：
			from 相对路径包或模块 import 属性或模块名
			或 from 相对路径包或模块 import *
		相对路径：
			.代表当前目录
			..代表上一级目录
			...代表上二级目录
			....以此类推
			注：相对导入时不能超出包的外部,超出只能用绝对路径导入
		示例：
			mypack/games/contra.py

	包的加载路径
		同模块的加载路径相同
			1. 当前文件夹
			2. sys.path 给出的路径

			