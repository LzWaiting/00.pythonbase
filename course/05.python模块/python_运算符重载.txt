运算符重载(C++/python)
	定义:
		让自定义的类生成的对象(实例)能够使用运算符进行操作
	作用:
		让自定义的类的实例像内建对象一样运行运算符操作
		让程序简洁易读
		对自定义的对象,将运算符赋予新的运算规则

	算术运算符的重载:
		__add__(self,rhs)			self + 	rhs 	加法
		__sub__(self,rhs)			self - 	rhs 	减法
		__mul__(self,rhs)			self * 	rhs 	乘法
		__truediv__(self,rhs)		self / 	rhs 	除法
		__floordiv__(self,rhs)		self // rhs 	地板除法
		__mod__(self,rhs)			self % 	rhs 	求余
		__pow__(self,rhs)			self ** rhs 	幂

		注:rhs(right hands side)
		示例:
			class MyNumber:
				def __init__(self,v):
					self.data = v
				def __repr__(self):
					return 'MyNumber(%r)' % self.data
				def __add__(self,other):
					v = self.data + other.data
					return MyNumber(v)

			n1 = MyNumber(100)
			n2 = MyNumber(200)
			n3 = n1 + n2
			print(n3)	
		练习:
			class MyList:
				def __init__(self,iterable):
					self.data = list(iterable)
				def __repr__(self):
					return 'MyList(%r)'% self.data
				def __add__(self,rhs):
					return MyList(self.data + rhs.data)
				def __mul__(self,v):
					return MyList(self.data * v)

			L1 = MyList([1,2,3])
			L2 = MyList([4,5,6])
			L3 = L1 + L2
			print(L3)
			L4 = L2 + L1
			print(L4)
			L5 = L1 * 2
			print(L5)			
			
			# 问题?
			L6 = 2 * L1		# 此时等同于2.__mul__(L1),为整型乘法运算,触发TypeError
			print(L6) 
	
	反向算术运算符的重载
		当左手边的类型为内建类型,右手边为自定义类型时,要实现运算必须用以下方法重载

		__radd__(self,rhs)			lhs +  self 	加法
		__rsub__(self,rhs)			lhs -  self 	减法
		__rmul__(self,rhs)			lhs *  self 	乘法
		__rtruediv__(self,rhs)		lhs /  self 	除法
		__rfloordiv__(self,rhs)		lhs // self 	地板除法
		__rmod__(self,rhs)			lhs %  self 	求余
		__rpow__(self,rhs)			lhs ** self 	幂	  

		示例:
			class MyList:
				def __init__(self,iterable):
					self.data = list(iterable)
				def __repr__(self):
					return 'MyList(%r)'% self.data
				def __mul__(self,rhs):
					return MyList(self.data * rhs)
				def __rmul__(self,lhs):
					return MyList(self.data * lhs)	

			L1 = MyList([1,2,3])
			L5 = L1 * 2
			print(L5)
			L6 = 2 * L1
			print(L6) 

	复合赋值算术运算符的重载
		__iadd__(self,rhs)			self +=  rhs 	加法
		__isub__(self,rhs)			self -=  rhs 	减法
		__imul__(self,rhs)			self *=  rhs 	乘法
		__itruediv__(self,rhs)		self /=  rhs 	除法
		__ifloordiv__(self,rhs)		self //= rhs 	地板除法
		__imod__(self,rhs)			self %=  rhs 	求余
		__ipow__(self,rhs)			self **= rhs 	幂

		示例:
			class MyList:
				def __init__(self,iterable):
					self.data = list(iterable)
				def __repr__(self):
					return 'MyList(%r)'% self.data
				def __add__(self,rhs):
					return MyList(self.data + rhs.data)
				def __iadd__(self,rhs):
					self.data.extend(rhs.data)
					return self

			L1 = MyList([1,2,3])
			L2 = MyList([4,5,6])
			L1 += L2	# 当没有__iadd__方法时,等同于调用L1 = L1 + L2
			print(L1)

	疑问?
		问题1:
			L = [1,2,3]
			def f1():
				# global L
				L = L + [4,5,6]

			# f1()
		问题2:
			def f2():
				# global L
				L += [4,5,6]	# 等同于调用L.__iadd__([4,5,6])方法

			f2()
			print(L)
	
	比较运算符的重载:
		__lt__(self,rhs)		self <  rhs  小于
		__le__(self,rhs)		self <= rhs  小于等于
		__gt__(self,rhs)		self >  rhs  大于
		__ge__(self,rhs)		self >= rhs  大于等于
		__eq__(self,rhs)		self == rhs  等于
		__ne__(self,rhs)		self != rhs  不等于

		注:比较运算符通常返回 True或 False

	位运算符的重载:
		__invert__(self)			~ self 	取反(一元运算符)
		__and__(self,rhs)		self &  rhs	位与				
		__or__(self,rhs)		self |  rhs	位或
		__xor__(self,rhs)		self ^  rhs	位异或
		__lshift__(self,rhs)	self << rhs	左移
		__rshift__(self,rhs)	self >> rhs	右移

	反向位运算符重载:
		__rand__(self,lhs)		rhs &  self 位与				
		__ror__(self,lhs)		rhs |  self 位或
		__rxor__(self,lhs)		rhs ^  self 位异或
		__rlshift__(self,lhs)	rhs << self 左移
		__rrshift__(self,lhs)	rhs >> self 右移

	复合赋值位运算符重载:
		__iand__(self,rhs)		self &=  rhs 位与				
		__ior__(self,rhs)		self |=  rhs 位或
		__ixor__(self,rhs)		self ^=  rhs 位异或
		__ilshift__(self,rhs)	self <<= rhs 左移
		__irshift__(self,rhs)	self >>= rhs 右移

	一元运算符的重载:
		__neg__(self)			- self 负号
		__pos__(self)			+ self 正号
		__invert__(self)		~ self 取反

	一元运算符重载的方法:
		class 类名:
			def __xxx__(self):
				...
		示例:
			class MyList:
				def __init__(self,iterable):
					print('__init__被调用')
					self.data = list(iterable)
				def __repr__(self):
					return 'MyList(%r)' % self.data
				def __neg__(self):
					return MyList((-x for x in self.data))

			L1 = MyList([1,-2,3,-4])
			L2 = -L1
			print(L2)

	注:运算符的重载不改变运算符优先级

	特殊运算符重载:
		
		in / not in 重载方法
			__contains__(self,e)		e in self  成员运算
		示例:
			class MyList:
				def __init__(self,iterable):
					print('__init__被调用')
					self.data = list(iterable)
				def __repr__(self):
					return 'MyList(%r)' % self.data
				def __contains__(self,e):
					return e in self.data

			L1 = MyList([1,-2,3,-4])
			if -1 not in L1:
				print('-1不在L1中')
			else:
				print('-1在L1中')
		
		索引/切片 运算符重载方法
			__getitem__(self,i)		x = self[i]索引/切片取值
			__setitem__(self,i,v)	self[i] = v 索引/切片赋值
			__delitem__(self,i)		del self[i] del语句删除索引等
			作用:
				让自定义的类型的对象能够支持索引和切片操作
			示例:
				class MyList:
					def __init__(self,iterable):
						print('__init__被调用')
						self.data = list(iterable)
					def __repr__(self):
						return 'MyList(%r)' % self.data
					def __getitem__(self,i):
						print('__get__被调用')
						return self.data[i]
					def __setitem__(self,i,v):
						print('__set__被调用')
						self.data[i] = v
						return self
					def __delitem__(self,i):
						print('__del__被调用')
						del self.data[i]
						return self

				L1 = MyList([1,-2,3,-4])
				v = L1[0]
				print(v)
				L1[1] = 2
				print(L1)
				del L1[3]
				print(L1)
				L2 = L1[:2]
				print(L2)				

		slice 函数
			作用:
				用于创建一个Slice切片对象,此对象存储一个节片的起始值,终止值和步长信息
			格式:
				slice(start,stop=None,step=None) 创建一个切片对象
			slice的对象的属性:
					s.start		切片起始值,默认为None
					s.stop		切片终止值,默认为None
					s.step		切片步长,默认为None
			示例:
				class MyList:
					def __init__(self,iterable):
						print('__init__被调用')
						self.data = list(iterable)
					def __repr__(self):
						return 'MyList(%r)' % self.data
					def __getitem__(self,i):
						print('__get__被调用,i=',i)
						if type(i) is int:
							print('正在索引操作')
						elif type(i) is slice:
							print('正在切片操作')
						else:
							raise KeyError
						return self.data[i]

				L1 = MyList([1,-2,3,-4,5,-6])
				print(L1[::2])				


